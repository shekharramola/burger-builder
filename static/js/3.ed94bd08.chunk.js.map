{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","props","className","Classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","zipCode","minLength","maxLength","country","deliveryMethod","options","displayValue","loading","formIsValid","orderHandler","event","preventDefault","console","log","setState","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBuger","token","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","isFormValid","rules","isValid","trim","length","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","Spinner","classes","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","cancelHandler","history","goBack","continueHandler","replace","onInitPurchase","summary","to","purchaseRedirect","purchased","path","match","component","actionTypes"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,gBAAkB,qF,oBCApCD,EAAOC,QAAU,CAAC,YAAc,4E,iICkBjBC,EAdS,SAACC,GACzB,OACI,yBAAKC,UAAWC,IAAQH,iBACpB,qDACA,yBAAKI,MAAO,CAACC,MAAM,OAAQC,OAAO,SAC9B,kBAACC,EAAA,EAAD,CAAQC,YAAeP,EAAMO,eAEjC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASV,EAAMW,mBAAxC,UAEA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASV,EAAMY,mBAAzC,c,6oBCJFC,E,2MACNC,MAAQ,CACJC,UAAU,CACNC,KAAK,CACDC,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,aAEhBC,MAAM,GACNC,WAAW,CACPC,UAAU,GAEdC,OAAM,EAAMC,SAAQ,GAExBC,MAAO,CACHT,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,cAEhBC,MAAM,GACNC,WAAW,CACPC,UAAU,GACZC,OAAM,EAAMC,SAAQ,GAEtBE,OAAO,CACHV,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,eAEhBC,MAAM,GACNC,WAAW,CACPC,UAAU,GACZC,OAAM,EAAMC,SAAQ,GAE1BG,QAAQ,CACJX,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,OAEhBC,MAAM,GACNC,WAAW,CACPC,UAAU,EACVM,UAAU,EACVC,UAAU,GACZN,OAAM,EAAMC,SAAQ,GAE1BM,QAAQ,CACJd,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,WAEhBC,MAAM,GACNC,WAAW,CACPC,UAAU,GACZC,OAAM,EAAMC,SAAQ,GAE1BO,eAAe,CACXf,YAAY,SACZC,cAAc,CACVe,QAAQ,CACJ,CAACZ,MAAM,UAAWa,aAAa,WAC/B,CAACb,MAAM,WAAYa,aAAa,cAGxCb,MAAM,WACNC,WAAW,GACXE,OAAM,IAGlBW,SAAQ,EACRC,aAAY,G,EAGhBC,aAAe,SAACC,GAChBA,EAAMC,iBACNC,QAAQC,IAAI,EAAKzC,OACjB,EAAK0C,SAAS,CAACP,SAAQ,IACvB,IAAMQ,EAAW,GAEjB,IAAI,IAAIC,KADRJ,QAAQC,IAAI,EAAK3B,MAAMC,WACU,EAAKD,MAAMC,UACxCyB,QAAQC,IAAIG,GACXJ,QAAQC,IAAI,EAAK3B,MAAMC,UAAU6B,GAAuB3B,aACxD0B,EAASC,GAAyB,EAAK9B,MAAMC,UAAU6B,GAAuBvB,MAGnFmB,QAAQC,IAAIE,GAEZ,IAAME,EAAQ,CACVtC,YAAY,EAAKP,MAAM8C,KACvBC,MAAO,EAAK/C,MAAM+C,MAClBC,UAAUL,EACVM,OAAQ,EAAKjD,MAAMiD,QAEvB,EAAKjD,MAAMkD,aAAaL,EAAO,EAAK7C,MAAMmD,Q,EA+B1CC,oBAAqB,SAACd,EAAOe,GAC7B,IAAMC,EAAgB,KACf,EAAKxC,MAAMC,WAEZwC,EAAkB,KACjBD,EAAiBD,IAExBE,EAAmBlC,MAAQiB,EAAMkB,OAAOnC,MACxCkC,EAAmB/B,MAAQ,EAAKiC,cAAcF,EAAmBlC,MAAOkC,EAAmBjC,YAC3FiC,EAAmB9B,SAAU,EAC7B6B,EAAiBD,GAAmBE,EACpC,IAAIG,GAAc,EAClB,IAAI,IAAIL,KAAmBC,EACxBI,EAAcJ,EAAiBD,GAAiB7B,OAASkC,EAE5DlB,QAAQC,IAAIiB,GACZ,EAAKhB,SAAS,CACV3B,UAAUuC,EAAkBlB,YAAasB,K,6EArC/BrC,EAAMsC,GAChBnB,QAAQC,IAAIpB,GACZmB,QAAQC,IAAIkB,GAChB,IAAIC,GAAU,EAYd,OAXID,GAASA,EAAMpC,WACfqC,EAA2B,KAAjBvC,EAAMwC,QAAiBD,GAEjCD,GAASA,EAAM9B,YACf+B,EAAUvC,GAASA,EAAMyC,QAAUH,EAAM9B,WAAa+B,GAEtDD,GAASA,EAAM7B,YAEf8B,EAAUvC,GAASA,EAAMyC,QAAUH,EAAM7B,WAAa8B,GAGnDA,I,+BA0BE,IAAD,OACEG,EAAmB,GACzB,IAAI,IAAIC,KAAOC,KAAKnD,MAAMC,UACtBgD,EAAiBG,KAAK,CAClBC,GAAGH,EACHI,OAAOH,KAAKnD,MAAMC,UAAUiD,KAGpC,IAAIK,EACA,0BAAMC,SAAUL,KAAK5B,cACb0B,EAAiBQ,KAAI,SAAAC,GAAW,OAChC,kBAACC,EAAA,EAAD,CACAT,IAAKQ,EAAYL,GACjBlD,YAAauD,EAAYJ,OAAOnD,YAChCC,cAAesD,EAAYJ,OAAOlD,cAClCG,MAAOmD,EAAYJ,OAAO/C,MAC1BqD,SAAUF,EAAYJ,OAAO5C,MAC7BmD,eAAgBH,EAAYJ,OAAO9C,WACnCG,QAAS+C,EAAYJ,OAAO3C,QAC5BmD,QAAS,SAACtC,GAAD,OAAW,EAAKc,oBAAoBd,EAAOkC,EAAYL,UAEhE,kBAAC3D,EAAA,EAAD,CAAQC,QAAQ,UAAUoE,UAAWZ,KAAKnD,MAAMsB,aAAhD,UAOZ,OAJI6B,KAAKjE,MAAMmC,UACXkC,EAAO,kBAACS,EAAA,EAAD,OAIP,yBAAK7E,UAAW8E,IAAQlE,aACpB,uDACCwD,O,GArLaW,aA2MXC,eAhBS,SAAAnE,GACpB,MAAO,CACHgC,KAAMhC,EAAMoE,cAAc3E,YAC1BwC,MAAOjC,EAAMoE,cAAcC,WAC3BhD,QAASrB,EAAM+B,MAAMV,QACrBgB,MAAOrC,EAAMsE,KAAKjC,MAClBF,OAAQnC,EAAMsE,KAAKnC,WAIA,SAAAoC,GACvB,MAAO,CACHnC,aAAc,SAACF,EAAUG,GAAX,OAAqBkC,EAASC,IAAuBtC,EAAUG,QAItE8B,CAA4CM,YAAiB1E,EAAY2E,MC9MjFC,E,2MAyBFC,cAAgB,WAClB,EAAK1F,MAAM2F,QAAQC,U,EAEjBC,gBAAkB,WACrB,EAAK7F,MAAM2F,QAAQG,QAAQ,2B,mFA3BxB7B,KAAKjE,MAAM+F,mB,+BA8Bd,IAAIC,EAAU,kBAAC,IAAD,CAAUC,GAAI,MAC5B,GAAGhC,KAAKjE,MAAM8C,KAAM,CAClBN,QAAQC,IAAIwB,KAAKjE,OACjB,IAAMkG,EAAmBjC,KAAKjE,MAAMmG,UAAU,kBAAC,IAAD,CAAUF,GAAI,MAAM,KAClED,EACE,6BACGE,EACH,kBAAC,EAAD,CACAvF,kBAAqBsD,KAAKyB,cAC1B9E,kBAAqBqD,KAAK4B,gBACzBtF,YAAa0D,KAAKjE,MAAM8C,OAExB,kBAAC,IAAD,CAAOsD,KAAMnC,KAAKjE,MAAMqG,MAAMD,KAAO,gBACrCE,UAAWzF,KAOd,OAAOmF,M,GApDahB,aAqERC,uBAbS,SAACnE,GACvB,MAAO,CACLgC,KAAMhC,EAAMoE,cAAc3E,YAC1BwC,MAAOjC,EAAMoE,cAAcC,WAC3BgB,UAAWrF,EAAM+B,MAAMsD,cAGA,SAAAd,GACzB,MAAO,CACNU,eAAgB,kBAAMV,EAASkB,WAInBtB,CAA6CQ","file":"static/js/3.ed94bd08.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_-_-src-components-Order-CheckoutSummary-CheckoutSummary__CheckoutSummary--j0r17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_-_-src-containers-Checkout-ContactData-ContactData__ContactData--315az\"};","\nimport React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport Classes from './CheckoutSummary.css'; \nconst CheckoutSummary = (props)=>{\nreturn (\n    <div className={Classes.CheckoutSummary}>\n        <h1>Hope, it tastes well!</h1>\n        <div style={{width:'100%', margin:'auto'}}>\n            <Burger ingredients = {props.ingredients}/>\n        </div>\n        <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEl</Button>\n\n        <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n    </div>\n)\n}\n\nexport default CheckoutSummary;","\nimport React, {Component} from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css'\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nclass ContactData extends Component {\nstate = {\n    orderForm:{\n        name:{\n            elementType:'input',\n            elementConfig:{\n                type:'text',\n                placeholder:'Your name'\n            },\n            value:'',\n            validation:{\n                required: true\n            },\n            valid:false,touched:false\n        },\n        email: {\n            elementType:'input',\n            elementConfig:{\n                type:'text',\n                placeholder:'Your email'\n            },\n            value:'',\n            validation:{\n                required: true\n            },valid:false,touched:false\n        },\n            street:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Your street'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },valid:false,touched:false\n            },\n            zipCode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'zip'\n                },\n                value:'',\n                validation:{\n                    required: true,\n                    minLength:5,\n                    maxLength:5\n                },valid:false,touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'country'\n                },\n                value:'',\n                validation:{\n                    required: true\n                },valid:false,touched:false\n            },\n            deliveryMethod:{\n                elementType:'select',\n                elementConfig:{\n                    options:[\n                        {value:'fastest', displayValue:'Fastest'},\n                        {value:'cheapest', displayValue:'Cheapest'}\n                    ]\n                },\n                value:'cheapest',\n                validation:{},\n                valid:true\n            }\n    },\n    loading:false,\n    formIsValid:false\n}\n\norderHandler = (event) =>{\nevent.preventDefault();\nconsole.log(this.props);\nthis.setState({loading:true});\nconst formData = {};\nconsole.log(this.state.orderForm);\nfor(let formElementIdentifier in this.state.orderForm){\n    console.log(formElementIdentifier);\n     console.log(this.state.orderForm[formElementIdentifier].elementType);\n     formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n}\n\nconsole.log(formData);\n\nconst order = {\n    ingredients:this.props.ings,\n    price: this.props.price,\n    orderData:formData,\n    userId: this.props.userId\n}\nthis.props.onOrderBuger(order, this.props.token);\n// axios.post('/orders.json',order).then(response=>{\n//     console.log(response);\n//     this.setState({loading:false});\n//     this.props.history.push('/');\n// }).catch(error=>{\n//     console.log(error);\n//     this.setState({loading:false});\n// })\n}\n\ncheckValidity(value,rules){\n    console.log(value);\n    console.log(rules)\nlet isValid = true;\nif (rules && rules.required) {\n    isValid = value.trim() !== '' && isValid;\n}\nif (rules && rules.minLength) {\n    isValid = value && value.length >= rules.minLength && isValid;\n}\nif (rules && rules.maxLength) {\n\n    isValid = value && value.length <= rules.maxLength && isValid;\n}\n\nreturn isValid;\n}\n\n\n\ninputChangedHandler =(event, inputIdentifier)=> {\nconst updatedOrderForm = {\n    ...this.state.orderForm\n};\nconst updatedFormElement = {\n    ...updatedOrderForm[inputIdentifier]\n}\nupdatedFormElement.value = event.target.value;\nupdatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\nupdatedFormElement.touched = true;\nupdatedOrderForm[inputIdentifier] = updatedFormElement;\nlet isFormValid = true;\nfor(let inputIdentifier in updatedOrderForm){\n   isFormValid = updatedOrderForm[inputIdentifier].valid && isFormValid;\n}\nconsole.log(isFormValid);\nthis.setState({\n    orderForm:updatedOrderForm, formIsValid: isFormValid\n})\n}\n\nrender(){\n    const formElementArray = [];\n    for(let key in this.state.orderForm){\n        formElementArray.push({\n            id:key,\n            config:this.state.orderForm[key]\n        })\n    }\n    let form = (\n        <form onSubmit={this.orderHandler}>\n               {formElementArray.map(formElement=>(\n                <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig}  \n                value={formElement.config.value} \n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n    ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n    );\n    if (this.props.loading) {\n        form = <Spinner/>  \n    }  \n\n    return (\n        <div className={classes.ContactData}>\n            <h4>Enter your contact data</h4>\n            {form}\n        </div>\n    );\n}\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBuger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, { Component } from 'react'; \nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\n//import { URLSearchParams } from 'url';\nimport {Route, Redirect} from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport {connect} from 'react-redux';\nimport * as actionTypes from '../../store/actions/index';\n class Checkout extends Component {\n   componentDidMount() {\n     this.props.onInitPurchase();\n   }\n    //  state = {\n    //      ingredients : null,\n    //      totalPrice:0\n    //  }\n\n    //  componentWillMount(){\n    //      console.log(this.props.location.search);\n    //    const query = new URLSearchParams(this.props.location.search);\n    //       const ingredients ={};\n    //       let price = 0;\n    //       for(let param of query.entries()){\n    //           if (param[0] === 'price') {\n    //             price = param[1]; \n    //           } else {\n               \n    //         ingredients[param[0]]= +param[1];   \n    //           }\n    //       }\n    //       console.log(ingredients);\n    //       this.setState({ingredients:ingredients, totalPrice:price})\n    //  }\n     cancelHandler = () => {\n   this.props.history.goBack();\n     }\n     continueHandler = () => {\n  this.props.history.replace('/checkout/contact-data');\n     }\nrender(){\n  let summary = <Redirect to =\"/\"/>\n  if(this.props.ings) {\n    console.log(this.props);\n    const purchaseRedirect = this.props.purchased?<Redirect to =\"/\"/>:null\n    summary = (\n      <div>\n        {purchaseRedirect}\n      <CheckoutSummary\n      checkoutCancelled = {this.cancelHandler}\n      checkoutContinued = {this.continueHandler}\n       ingredients={this.props.ings}/>\n\n       <Route path={this.props.match.path + '/contact-data'} \n       component={ContactData}\n      //  render = {(props)=>(<ContactData ingredient={this.state.ingredients} totalPrice={this.state.totalPrice} {...props}/>)}\n       />\n  </div>\n\n    )\n  }\n    return summary;\n}\n }\n\n const mapStateToProps = (state) => {\n   return {\n     ings: state.burgerBuilder.ingredients,\n     price: state.burgerBuilder.totalPrice,\n     purchased: state.order.purchased\n   }\n }\n const mapDispatchToprops = dispatch => {\n   return {\n    onInitPurchase: () => dispatch(actionTypes.purchaseInit())\n   }\n }\n\n export default connect(mapStateToProps, mapDispatchToprops)(Checkout);"],"sourceRoot":""}